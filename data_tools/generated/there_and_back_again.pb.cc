// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: there_and_back_again.proto

#include "there_and_back_again.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_there_5fand_5fback_5fagain_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_there_5fand_5fback_5fagain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Bounds;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_there_5fand_5fback_5fagain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_there_5fand_5fback_5fagain_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransportStatistics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_there_5fand_5fback_5fagain_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AreaQuery;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_there_5fand_5fback_5fagain_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClusterBounds;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_there_5fand_5fback_5fagain_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_there_5fand_5fback_5fagain_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StatisticalAreaPolygons;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_there_5fand_5fback_5fagain_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TransitStatistics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_there_5fand_5fback_5fagain_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_StatisticalArea;
}  // namespace protobuf_there_5fand_5fback_5fagain_2eproto
namespace timhobbs {
namespace there_and_back_again {
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position>
      _instance;
} _Position_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Polygon>
      _instance;
} _Polygon_default_instance_;
class TransportStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransportStatistics>
      _instance;
} _TransportStatistics_default_instance_;
class TransitStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransitStatistics>
      _instance;
} _TransitStatistics_default_instance_;
class BoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bounds>
      _instance;
} _Bounds_default_instance_;
class StatisticalAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatisticalArea>
      _instance;
} _StatisticalArea_default_instance_;
class StatisticalAreaPolygonsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatisticalAreaPolygons>
      _instance;
} _StatisticalAreaPolygons_default_instance_;
class StatisticalAreaPolygonsCollectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatisticalAreaPolygonsCollection>
      _instance;
} _StatisticalAreaPolygonsCollection_default_instance_;
class ClusterBoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClusterBounds>
      _instance;
} _ClusterBounds_default_instance_;
class AreaQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AreaQuery>
      _instance;
} _AreaQuery_default_instance_;
class CoreDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CoreData>
      _instance;
} _CoreData_default_instance_;
}  // namespace there_and_back_again
}  // namespace timhobbs
namespace protobuf_there_5fand_5fback_5fagain_2eproto {
static void InitDefaultsPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_Position_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition}, {}};

static void InitDefaultsPolygon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_Polygon_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::Polygon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::Polygon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Polygon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPolygon}, {
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Position.base,}};

static void InitDefaultsTransportStatistics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_TransportStatistics_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::TransportStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::TransportStatistics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransportStatistics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransportStatistics}, {}};

static void InitDefaultsTransitStatistics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_TransitStatistics_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::TransitStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::TransitStatistics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransitStatistics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransitStatistics}, {
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_TransportStatistics.base,}};

static void InitDefaultsBounds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_Bounds_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::Bounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::Bounds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Bounds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBounds}, {}};

static void InitDefaultsStatisticalArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_StatisticalArea_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::StatisticalArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::StatisticalArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_StatisticalArea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsStatisticalArea}, {
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_TransitStatistics.base,
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Position.base,
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Bounds.base,}};

static void InitDefaultsStatisticalAreaPolygons() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_StatisticalAreaPolygons_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::StatisticalAreaPolygons();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::StatisticalAreaPolygons::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StatisticalAreaPolygons =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStatisticalAreaPolygons}, {
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Polygon.base,}};

static void InitDefaultsStatisticalAreaPolygonsCollection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_StatisticalAreaPolygonsCollection_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StatisticalAreaPolygonsCollection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStatisticalAreaPolygonsCollection}, {
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_StatisticalAreaPolygons.base,}};

static void InitDefaultsClusterBounds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_ClusterBounds_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::ClusterBounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::ClusterBounds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClusterBounds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClusterBounds}, {
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Bounds.base,}};

static void InitDefaultsAreaQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_AreaQuery_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::AreaQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::AreaQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AreaQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAreaQuery}, {
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_ClusterBounds.base,}};

static void InitDefaultsCoreData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::timhobbs::there_and_back_again::_CoreData_default_instance_;
    new (ptr) ::timhobbs::there_and_back_again::CoreData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::timhobbs::there_and_back_again::CoreData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CoreData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCoreData}, {
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_StatisticalArea.base,
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_AreaQuery.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Position.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Polygon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransportStatistics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransitStatistics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Bounds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatisticalArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatisticalAreaPolygons.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatisticalAreaPolygonsCollection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClusterBounds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AreaQuery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CoreData.base);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Position, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Position, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Position, lng_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Polygon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Polygon, positions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::TransportStatistics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::TransportStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::TransportStatistics, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::TransportStatistics, count_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::TransitStatistics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::TransitStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::TransitStatistics, statisticalareaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::TransitStatistics, iseducation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::TransitStatistics, transportstatistics_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Bounds, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Bounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Bounds, minlat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Bounds, minlng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Bounds, maxlat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::Bounds, maxlng_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalArea, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalArea, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalArea, clusterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalArea, inwardtravelstatistics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalArea, centroid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalArea, bounds_),
  3,
  0,
  4,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalAreaPolygons, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalAreaPolygons, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalAreaPolygons, statisticalareaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalAreaPolygons, polygons_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection, statisticalareapolygons_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::ClusterBounds, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::ClusterBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::ClusterBounds, clusterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::ClusterBounds, bounds_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::AreaQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::AreaQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::AreaQuery, clusterbounds_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::CoreData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::CoreData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::CoreData, statisticalareas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::timhobbs::there_and_back_again::CoreData, areaquery_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::timhobbs::there_and_back_again::Position)},
  { 9, 15, sizeof(::timhobbs::there_and_back_again::Polygon)},
  { 16, 23, sizeof(::timhobbs::there_and_back_again::TransportStatistics)},
  { 25, 33, sizeof(::timhobbs::there_and_back_again::TransitStatistics)},
  { 36, 45, sizeof(::timhobbs::there_and_back_again::Bounds)},
  { 49, 60, sizeof(::timhobbs::there_and_back_again::StatisticalArea)},
  { 66, 73, sizeof(::timhobbs::there_and_back_again::StatisticalAreaPolygons)},
  { 75, 81, sizeof(::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection)},
  { 82, 89, sizeof(::timhobbs::there_and_back_again::ClusterBounds)},
  { 91, 97, sizeof(::timhobbs::there_and_back_again::AreaQuery)},
  { 98, 105, sizeof(::timhobbs::there_and_back_again::CoreData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_TransportStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_TransitStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_Bounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_StatisticalArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_StatisticalAreaPolygons_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_StatisticalAreaPolygonsCollection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_ClusterBounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_AreaQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::timhobbs::there_and_back_again::_CoreData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "there_and_back_again.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032there_and_back_again.proto\022\035timhobbs.t"
      "here_and_back_again\"$\n\010Position\022\013\n\003lat\030\001"
      " \002(\002\022\013\n\003lng\030\002 \002(\002\"E\n\007Polygon\022:\n\tposition"
      "s\030\001 \003(\0132\'.timhobbs.there_and_back_again."
      "Position\"\356\001\n\023TransportStatistics\022E\n\004type"
      "\030\001 \002(\01627.timhobbs.there_and_back_again.T"
      "ransportStatistics.Type\022\r\n\005count\030\002 \002(\005\"\200"
      "\001\n\004Type\022\t\n\005TOTAL\020\001\022\022\n\016WORK_FROM_HOME\020\002\022\t"
      "\n\005DRIVE\020\003\022\r\n\tPASSENGER\020\004\022\013\n\007BICYCLE\020\005\022\010\n"
      "\004WALK\020\006\022\007\n\003BUS\020\007\022\t\n\005TRAIN\020\010\022\t\n\005FERRY\020\t\022\t"
      "\n\005OTHER\020\n\"\224\001\n\021TransitStatistics\022\031\n\021stati"
      "sticalAreaId\030\001 \002(\005\022\023\n\013isEducation\030\002 \002(\010\022"
      "O\n\023transportStatistics\030\003 \003(\01322.timhobbs."
      "there_and_back_again.TransportStatistics"
      "\"H\n\006Bounds\022\016\n\006minLat\030\001 \002(\002\022\016\n\006minLng\030\002 \002"
      "(\002\022\016\n\006maxLat\030\003 \002(\002\022\016\n\006maxLng\030\004 \002(\002\"\202\002\n\017S"
      "tatisticalArea\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t"
      "\022\021\n\tclusterId\030\003 \002(\005\022P\n\026inwardTravelStati"
      "stics\030\004 \003(\01320.timhobbs.there_and_back_ag"
      "ain.TransitStatistics\0229\n\010centroid\030\005 \002(\0132"
      "\'.timhobbs.there_and_back_again.Position"
      "\0225\n\006bounds\030\006 \002(\0132%.timhobbs.there_and_ba"
      "ck_again.Bounds\"n\n\027StatisticalAreaPolygo"
      "ns\022\031\n\021statisticalAreaId\030\001 \002(\005\0228\n\010polygon"
      "s\030\002 \003(\0132&.timhobbs.there_and_back_again."
      "Polygon\"|\n!StatisticalAreaPolygonsCollec"
      "tion\022W\n\027statisticalAreaPolygons\030\001 \003(\01326."
      "timhobbs.there_and_back_again.Statistica"
      "lAreaPolygons\"Y\n\rClusterBounds\022\021\n\tcluste"
      "rId\030\001 \002(\005\0225\n\006bounds\030\002 \002(\0132%.timhobbs.the"
      "re_and_back_again.Bounds\"P\n\tAreaQuery\022C\n"
      "\rclusterBounds\030\001 \003(\0132,.timhobbs.there_an"
      "d_back_again.ClusterBounds\"\221\001\n\010CoreData\022"
      "H\n\020statisticalAreas\030\001 \003(\0132..timhobbs.the"
      "re_and_back_again.StatisticalArea\022;\n\tare"
      "aQuery\030\002 \002(\0132(.timhobbs.there_and_back_a"
      "gain.AreaQuery"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1454);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "there_and_back_again.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_there_5fand_5fback_5fagain_2eproto
namespace timhobbs {
namespace there_and_back_again {
const ::google::protobuf::EnumDescriptor* TransportStatistics_Type_descriptor() {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_there_5fand_5fback_5fagain_2eproto::file_level_enum_descriptors[0];
}
bool TransportStatistics_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransportStatistics_Type TransportStatistics::TOTAL;
const TransportStatistics_Type TransportStatistics::WORK_FROM_HOME;
const TransportStatistics_Type TransportStatistics::DRIVE;
const TransportStatistics_Type TransportStatistics::PASSENGER;
const TransportStatistics_Type TransportStatistics::BICYCLE;
const TransportStatistics_Type TransportStatistics::WALK;
const TransportStatistics_Type TransportStatistics::BUS;
const TransportStatistics_Type TransportStatistics::TRAIN;
const TransportStatistics_Type TransportStatistics::FERRY;
const TransportStatistics_Type TransportStatistics::OTHER;
const TransportStatistics_Type TransportStatistics::Type_MIN;
const TransportStatistics_Type TransportStatistics::Type_MAX;
const int TransportStatistics::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kLatFieldNumber;
const int Position::kLngFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Position.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.Position)
}

void Position::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Position.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lng_) -
        reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lng = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_lng();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float lat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // required float lng = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lng(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float lat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lat(), target);
  }

  // required float lng = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lng(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.Position)
  return target;
}

size_t Position::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:timhobbs.there_and_back_again.Position)
  size_t total_size = 0;

  if (has_lat()) {
    // required float lat = 1;
    total_size += 1 + 4;
  }

  if (has_lng()) {
    // required float lng = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float lat = 1;
    total_size += 1 + 4;

    // required float lng = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000002u) {
      lng_ = from.lng_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  swap(lat_, other->lat_);
  swap(lng_, other->lng_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Polygon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.Polygon)
}

void Polygon::SharedCtor() {
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
}

void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon& Polygon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Polygon.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.Polygon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .timhobbs.there_and_back_again.Position positions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .timhobbs.there_and_back_again.Position positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->positions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .timhobbs.there_and_back_again.Position positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->positions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.Polygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .timhobbs.there_and_back_again.Position positions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->positions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->positions())) return false;
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  CastToBase(&positions_)->InternalSwap(CastToBase(&other->positions_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransportStatistics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportStatistics::kTypeFieldNumber;
const int TransportStatistics::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportStatistics::TransportStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_TransportStatistics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.TransportStatistics)
}
TransportStatistics::TransportStatistics(const TransportStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&count_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.TransportStatistics)
}

void TransportStatistics::SharedCtor() {
  count_ = 0;
  type_ = 1;
}

TransportStatistics::~TransportStatistics() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.TransportStatistics)
  SharedDtor();
}

void TransportStatistics::SharedDtor() {
}

void TransportStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransportStatistics::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportStatistics& TransportStatistics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_TransportStatistics.base);
  return *internal_default_instance();
}


void TransportStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.TransportStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    count_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.TransportStatistics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .timhobbs.there_and_back_again.TransportStatistics.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::timhobbs::there_and_back_again::TransportStatistics_Type_IsValid(value)) {
            set_type(static_cast< ::timhobbs::there_and_back_again::TransportStatistics_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.TransportStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.TransportStatistics)
  return false;
#undef DO_
}

void TransportStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.TransportStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .timhobbs.there_and_back_again.TransportStatistics.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.TransportStatistics)
}

::google::protobuf::uint8* TransportStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.TransportStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .timhobbs.there_and_back_again.TransportStatistics.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.TransportStatistics)
  return target;
}

size_t TransportStatistics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:timhobbs.there_and_back_again.TransportStatistics)
  size_t total_size = 0;

  if (has_count()) {
    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_type()) {
    // required .timhobbs.there_and_back_again.TransportStatistics.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t TransportStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.TransportStatistics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required .timhobbs.there_and_back_again.TransportStatistics.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.TransportStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.TransportStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.TransportStatistics)
    MergeFrom(*source);
  }
}

void TransportStatistics::MergeFrom(const TransportStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.TransportStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransportStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.TransportStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportStatistics::CopyFrom(const TransportStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.TransportStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TransportStatistics::Swap(TransportStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportStatistics::InternalSwap(TransportStatistics* other) {
  using std::swap;
  swap(count_, other->count_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransportStatistics::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransitStatistics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransitStatistics::kStatisticalAreaIdFieldNumber;
const int TransitStatistics::kIsEducationFieldNumber;
const int TransitStatistics::kTransportStatisticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransitStatistics::TransitStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_TransitStatistics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.TransitStatistics)
}
TransitStatistics::TransitStatistics(const TransitStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      transportstatistics_(from.transportstatistics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&statisticalareaid_, &from.statisticalareaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iseducation_) -
    reinterpret_cast<char*>(&statisticalareaid_)) + sizeof(iseducation_));
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.TransitStatistics)
}

void TransitStatistics::SharedCtor() {
  ::memset(&statisticalareaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iseducation_) -
      reinterpret_cast<char*>(&statisticalareaid_)) + sizeof(iseducation_));
}

TransitStatistics::~TransitStatistics() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.TransitStatistics)
  SharedDtor();
}

void TransitStatistics::SharedDtor() {
}

void TransitStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransitStatistics::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransitStatistics& TransitStatistics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_TransitStatistics.base);
  return *internal_default_instance();
}


void TransitStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.TransitStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transportstatistics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&statisticalareaid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iseducation_) -
        reinterpret_cast<char*>(&statisticalareaid_)) + sizeof(iseducation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransitStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.TransitStatistics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statisticalAreaId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_statisticalareaid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statisticalareaid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isEducation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_iseducation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iseducation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .timhobbs.there_and_back_again.TransportStatistics transportStatistics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_transportstatistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.TransitStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.TransitStatistics)
  return false;
#undef DO_
}

void TransitStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.TransitStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 statisticalAreaId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statisticalareaid(), output);
  }

  // required bool isEducation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iseducation(), output);
  }

  // repeated .timhobbs.there_and_back_again.TransportStatistics transportStatistics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transportstatistics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->transportstatistics(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.TransitStatistics)
}

::google::protobuf::uint8* TransitStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.TransitStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 statisticalAreaId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statisticalareaid(), target);
  }

  // required bool isEducation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iseducation(), target);
  }

  // repeated .timhobbs.there_and_back_again.TransportStatistics transportStatistics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transportstatistics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->transportstatistics(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.TransitStatistics)
  return target;
}

size_t TransitStatistics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:timhobbs.there_and_back_again.TransitStatistics)
  size_t total_size = 0;

  if (has_statisticalareaid()) {
    // required int32 statisticalAreaId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->statisticalareaid());
  }

  if (has_iseducation()) {
    // required bool isEducation = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TransitStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.TransitStatistics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 statisticalAreaId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->statisticalareaid());

    // required bool isEducation = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .timhobbs.there_and_back_again.TransportStatistics transportStatistics = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->transportstatistics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transportstatistics(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransitStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.TransitStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const TransitStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransitStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.TransitStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.TransitStatistics)
    MergeFrom(*source);
  }
}

void TransitStatistics::MergeFrom(const TransitStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.TransitStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transportstatistics_.MergeFrom(from.transportstatistics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      statisticalareaid_ = from.statisticalareaid_;
    }
    if (cached_has_bits & 0x00000002u) {
      iseducation_ = from.iseducation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransitStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.TransitStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransitStatistics::CopyFrom(const TransitStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.TransitStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->transportstatistics())) return false;
  return true;
}

void TransitStatistics::Swap(TransitStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransitStatistics::InternalSwap(TransitStatistics* other) {
  using std::swap;
  CastToBase(&transportstatistics_)->InternalSwap(CastToBase(&other->transportstatistics_));
  swap(statisticalareaid_, other->statisticalareaid_);
  swap(iseducation_, other->iseducation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransitStatistics::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bounds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bounds::kMinLatFieldNumber;
const int Bounds::kMinLngFieldNumber;
const int Bounds::kMaxLatFieldNumber;
const int Bounds::kMaxLngFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bounds::Bounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Bounds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.Bounds)
}
Bounds::Bounds(const Bounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minlat_, &from.minlat_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxlng_) -
    reinterpret_cast<char*>(&minlat_)) + sizeof(maxlng_));
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.Bounds)
}

void Bounds::SharedCtor() {
  ::memset(&minlat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlng_) -
      reinterpret_cast<char*>(&minlat_)) + sizeof(maxlng_));
}

Bounds::~Bounds() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.Bounds)
  SharedDtor();
}

void Bounds::SharedDtor() {
}

void Bounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Bounds::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bounds& Bounds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_Bounds.base);
  return *internal_default_instance();
}


void Bounds::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.Bounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&minlat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxlng_) -
        reinterpret_cast<char*>(&minlat_)) + sizeof(maxlng_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Bounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.Bounds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float minLat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_minlat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minlat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float minLng = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_minlng();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minlng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float maxLat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_maxlat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxlat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float maxLng = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_maxlng();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxlng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.Bounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.Bounds)
  return false;
#undef DO_
}

void Bounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.Bounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float minLat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->minlat(), output);
  }

  // required float minLng = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->minlng(), output);
  }

  // required float maxLat = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxlat(), output);
  }

  // required float maxLng = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->maxlng(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.Bounds)
}

::google::protobuf::uint8* Bounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.Bounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float minLat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->minlat(), target);
  }

  // required float minLng = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->minlng(), target);
  }

  // required float maxLat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxlat(), target);
  }

  // required float maxLng = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->maxlng(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.Bounds)
  return target;
}

size_t Bounds::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:timhobbs.there_and_back_again.Bounds)
  size_t total_size = 0;

  if (has_minlat()) {
    // required float minLat = 1;
    total_size += 1 + 4;
  }

  if (has_minlng()) {
    // required float minLng = 2;
    total_size += 1 + 4;
  }

  if (has_maxlat()) {
    // required float maxLat = 3;
    total_size += 1 + 4;
  }

  if (has_maxlng()) {
    // required float maxLng = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Bounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.Bounds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float minLat = 1;
    total_size += 1 + 4;

    // required float minLng = 2;
    total_size += 1 + 4;

    // required float maxLat = 3;
    total_size += 1 + 4;

    // required float maxLng = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.Bounds)
  GOOGLE_DCHECK_NE(&from, this);
  const Bounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.Bounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.Bounds)
    MergeFrom(*source);
  }
}

void Bounds::MergeFrom(const Bounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.Bounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      minlat_ = from.minlat_;
    }
    if (cached_has_bits & 0x00000002u) {
      minlng_ = from.minlng_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxlat_ = from.maxlat_;
    }
    if (cached_has_bits & 0x00000008u) {
      maxlng_ = from.maxlng_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Bounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.Bounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bounds::CopyFrom(const Bounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.Bounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bounds::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Bounds::Swap(Bounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bounds::InternalSwap(Bounds* other) {
  using std::swap;
  swap(minlat_, other->minlat_);
  swap(minlng_, other->minlng_);
  swap(maxlat_, other->maxlat_);
  swap(maxlng_, other->maxlng_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Bounds::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatisticalArea::InitAsDefaultInstance() {
  ::timhobbs::there_and_back_again::_StatisticalArea_default_instance_._instance.get_mutable()->centroid_ = const_cast< ::timhobbs::there_and_back_again::Position*>(
      ::timhobbs::there_and_back_again::Position::internal_default_instance());
  ::timhobbs::there_and_back_again::_StatisticalArea_default_instance_._instance.get_mutable()->bounds_ = const_cast< ::timhobbs::there_and_back_again::Bounds*>(
      ::timhobbs::there_and_back_again::Bounds::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticalArea::kIdFieldNumber;
const int StatisticalArea::kNameFieldNumber;
const int StatisticalArea::kClusterIdFieldNumber;
const int StatisticalArea::kInwardTravelStatisticsFieldNumber;
const int StatisticalArea::kCentroidFieldNumber;
const int StatisticalArea::kBoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticalArea::StatisticalArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_StatisticalArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.StatisticalArea)
}
StatisticalArea::StatisticalArea(const StatisticalArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      inwardtravelstatistics_(from.inwardtravelstatistics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_centroid()) {
    centroid_ = new ::timhobbs::there_and_back_again::Position(*from.centroid_);
  } else {
    centroid_ = NULL;
  }
  if (from.has_bounds()) {
    bounds_ = new ::timhobbs::there_and_back_again::Bounds(*from.bounds_);
  } else {
    bounds_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&clusterid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(clusterid_));
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.StatisticalArea)
}

void StatisticalArea::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&centroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clusterid_) -
      reinterpret_cast<char*>(&centroid_)) + sizeof(clusterid_));
}

StatisticalArea::~StatisticalArea() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.StatisticalArea)
  SharedDtor();
}

void StatisticalArea::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete centroid_;
  if (this != internal_default_instance()) delete bounds_;
}

void StatisticalArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StatisticalArea::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatisticalArea& StatisticalArea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_StatisticalArea.base);
  return *internal_default_instance();
}


void StatisticalArea::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.StatisticalArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inwardtravelstatistics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(centroid_ != NULL);
      centroid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bounds_ != NULL);
      bounds_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clusterid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(clusterid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StatisticalArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.StatisticalArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timhobbs.there_and_back_again.StatisticalArea.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 clusterId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_clusterid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clusterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .timhobbs.there_and_back_again.TransitStatistics inwardTravelStatistics = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inwardtravelstatistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .timhobbs.there_and_back_again.Position centroid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_centroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .timhobbs.there_and_back_again.Bounds bounds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.StatisticalArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.StatisticalArea)
  return false;
#undef DO_
}

void StatisticalArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.StatisticalArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timhobbs.there_and_back_again.StatisticalArea.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 clusterId = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clusterid(), output);
  }

  // repeated .timhobbs.there_and_back_again.TransitStatistics inwardTravelStatistics = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inwardtravelstatistics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->inwardtravelstatistics(static_cast<int>(i)),
      output);
  }

  // required .timhobbs.there_and_back_again.Position centroid = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_centroid(), output);
  }

  // required .timhobbs.there_and_back_again.Bounds bounds = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_bounds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.StatisticalArea)
}

::google::protobuf::uint8* StatisticalArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.StatisticalArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timhobbs.there_and_back_again.StatisticalArea.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 clusterId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clusterid(), target);
  }

  // repeated .timhobbs.there_and_back_again.TransitStatistics inwardTravelStatistics = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inwardtravelstatistics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->inwardtravelstatistics(static_cast<int>(i)), deterministic, target);
  }

  // required .timhobbs.there_and_back_again.Position centroid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_centroid(), deterministic, target);
  }

  // required .timhobbs.there_and_back_again.Bounds bounds = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_bounds(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.StatisticalArea)
  return target;
}

size_t StatisticalArea::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:timhobbs.there_and_back_again.StatisticalArea)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_centroid()) {
    // required .timhobbs.there_and_back_again.Position centroid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *centroid_);
  }

  if (has_bounds()) {
    // required .timhobbs.there_and_back_again.Bounds bounds = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_clusterid()) {
    // required int32 clusterId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clusterid());
  }

  return total_size;
}
size_t StatisticalArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.StatisticalArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .timhobbs.there_and_back_again.Position centroid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *centroid_);

    // required .timhobbs.there_and_back_again.Bounds bounds = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bounds_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 clusterId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clusterid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .timhobbs.there_and_back_again.TransitStatistics inwardTravelStatistics = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->inwardtravelstatistics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inwardtravelstatistics(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticalArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.StatisticalArea)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticalArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatisticalArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.StatisticalArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.StatisticalArea)
    MergeFrom(*source);
  }
}

void StatisticalArea::MergeFrom(const StatisticalArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.StatisticalArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inwardtravelstatistics_.MergeFrom(from.inwardtravelstatistics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_centroid()->::timhobbs::there_and_back_again::Position::MergeFrom(from.centroid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bounds()->::timhobbs::there_and_back_again::Bounds::MergeFrom(from.bounds());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      clusterid_ = from.clusterid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatisticalArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.StatisticalArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticalArea::CopyFrom(const StatisticalArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.StatisticalArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticalArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->inwardtravelstatistics())) return false;
  if (has_centroid()) {
    if (!this->centroid_->IsInitialized()) return false;
  }
  if (has_bounds()) {
    if (!this->bounds_->IsInitialized()) return false;
  }
  return true;
}

void StatisticalArea::Swap(StatisticalArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticalArea::InternalSwap(StatisticalArea* other) {
  using std::swap;
  CastToBase(&inwardtravelstatistics_)->InternalSwap(CastToBase(&other->inwardtravelstatistics_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(centroid_, other->centroid_);
  swap(bounds_, other->bounds_);
  swap(id_, other->id_);
  swap(clusterid_, other->clusterid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StatisticalArea::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatisticalAreaPolygons::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticalAreaPolygons::kStatisticalAreaIdFieldNumber;
const int StatisticalAreaPolygons::kPolygonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticalAreaPolygons::StatisticalAreaPolygons()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_StatisticalAreaPolygons.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.StatisticalAreaPolygons)
}
StatisticalAreaPolygons::StatisticalAreaPolygons(const StatisticalAreaPolygons& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      polygons_(from.polygons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  statisticalareaid_ = from.statisticalareaid_;
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.StatisticalAreaPolygons)
}

void StatisticalAreaPolygons::SharedCtor() {
  statisticalareaid_ = 0;
}

StatisticalAreaPolygons::~StatisticalAreaPolygons() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  SharedDtor();
}

void StatisticalAreaPolygons::SharedDtor() {
}

void StatisticalAreaPolygons::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StatisticalAreaPolygons::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatisticalAreaPolygons& StatisticalAreaPolygons::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_StatisticalAreaPolygons.base);
  return *internal_default_instance();
}


void StatisticalAreaPolygons::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygons_.Clear();
  statisticalareaid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StatisticalAreaPolygons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statisticalAreaId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_statisticalareaid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statisticalareaid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .timhobbs.there_and_back_again.Polygon polygons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  return false;
#undef DO_
}

void StatisticalAreaPolygons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 statisticalAreaId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statisticalareaid(), output);
  }

  // repeated .timhobbs.there_and_back_again.Polygon polygons = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->polygons(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.StatisticalAreaPolygons)
}

::google::protobuf::uint8* StatisticalAreaPolygons::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 statisticalAreaId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statisticalareaid(), target);
  }

  // repeated .timhobbs.there_and_back_again.Polygon polygons = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->polygons(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  return target;
}

size_t StatisticalAreaPolygons::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 statisticalAreaId = 1;
  if (has_statisticalareaid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->statisticalareaid());
  }
  // repeated .timhobbs.there_and_back_again.Polygon polygons = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->polygons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygons(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticalAreaPolygons::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticalAreaPolygons* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatisticalAreaPolygons>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.StatisticalAreaPolygons)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.StatisticalAreaPolygons)
    MergeFrom(*source);
  }
}

void StatisticalAreaPolygons::MergeFrom(const StatisticalAreaPolygons& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygons_.MergeFrom(from.polygons_);
  if (from.has_statisticalareaid()) {
    set_statisticalareaid(from.statisticalareaid());
  }
}

void StatisticalAreaPolygons::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticalAreaPolygons::CopyFrom(const StatisticalAreaPolygons& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.StatisticalAreaPolygons)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticalAreaPolygons::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->polygons())) return false;
  return true;
}

void StatisticalAreaPolygons::Swap(StatisticalAreaPolygons* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticalAreaPolygons::InternalSwap(StatisticalAreaPolygons* other) {
  using std::swap;
  CastToBase(&polygons_)->InternalSwap(CastToBase(&other->polygons_));
  swap(statisticalareaid_, other->statisticalareaid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StatisticalAreaPolygons::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatisticalAreaPolygonsCollection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticalAreaPolygonsCollection::kStatisticalAreaPolygonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticalAreaPolygonsCollection::StatisticalAreaPolygonsCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_StatisticalAreaPolygonsCollection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
}
StatisticalAreaPolygonsCollection::StatisticalAreaPolygonsCollection(const StatisticalAreaPolygonsCollection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      statisticalareapolygons_(from.statisticalareapolygons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
}

void StatisticalAreaPolygonsCollection::SharedCtor() {
}

StatisticalAreaPolygonsCollection::~StatisticalAreaPolygonsCollection() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  SharedDtor();
}

void StatisticalAreaPolygonsCollection::SharedDtor() {
}

void StatisticalAreaPolygonsCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StatisticalAreaPolygonsCollection::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatisticalAreaPolygonsCollection& StatisticalAreaPolygonsCollection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_StatisticalAreaPolygonsCollection.base);
  return *internal_default_instance();
}


void StatisticalAreaPolygonsCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statisticalareapolygons_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StatisticalAreaPolygonsCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .timhobbs.there_and_back_again.StatisticalAreaPolygons statisticalAreaPolygons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_statisticalareapolygons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  return false;
#undef DO_
}

void StatisticalAreaPolygonsCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .timhobbs.there_and_back_again.StatisticalAreaPolygons statisticalAreaPolygons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statisticalareapolygons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->statisticalareapolygons(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
}

::google::protobuf::uint8* StatisticalAreaPolygonsCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .timhobbs.there_and_back_again.StatisticalAreaPolygons statisticalAreaPolygons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statisticalareapolygons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->statisticalareapolygons(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  return target;
}

size_t StatisticalAreaPolygonsCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .timhobbs.there_and_back_again.StatisticalAreaPolygons statisticalAreaPolygons = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->statisticalareapolygons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->statisticalareapolygons(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticalAreaPolygonsCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticalAreaPolygonsCollection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatisticalAreaPolygonsCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
    MergeFrom(*source);
  }
}

void StatisticalAreaPolygonsCollection::MergeFrom(const StatisticalAreaPolygonsCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statisticalareapolygons_.MergeFrom(from.statisticalareapolygons_);
}

void StatisticalAreaPolygonsCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticalAreaPolygonsCollection::CopyFrom(const StatisticalAreaPolygonsCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticalAreaPolygonsCollection::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->statisticalareapolygons())) return false;
  return true;
}

void StatisticalAreaPolygonsCollection::Swap(StatisticalAreaPolygonsCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticalAreaPolygonsCollection::InternalSwap(StatisticalAreaPolygonsCollection* other) {
  using std::swap;
  CastToBase(&statisticalareapolygons_)->InternalSwap(CastToBase(&other->statisticalareapolygons_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StatisticalAreaPolygonsCollection::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClusterBounds::InitAsDefaultInstance() {
  ::timhobbs::there_and_back_again::_ClusterBounds_default_instance_._instance.get_mutable()->bounds_ = const_cast< ::timhobbs::there_and_back_again::Bounds*>(
      ::timhobbs::there_and_back_again::Bounds::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterBounds::kClusterIdFieldNumber;
const int ClusterBounds::kBoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterBounds::ClusterBounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_ClusterBounds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.ClusterBounds)
}
ClusterBounds::ClusterBounds(const ClusterBounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bounds()) {
    bounds_ = new ::timhobbs::there_and_back_again::Bounds(*from.bounds_);
  } else {
    bounds_ = NULL;
  }
  clusterid_ = from.clusterid_;
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.ClusterBounds)
}

void ClusterBounds::SharedCtor() {
  ::memset(&bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clusterid_) -
      reinterpret_cast<char*>(&bounds_)) + sizeof(clusterid_));
}

ClusterBounds::~ClusterBounds() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.ClusterBounds)
  SharedDtor();
}

void ClusterBounds::SharedDtor() {
  if (this != internal_default_instance()) delete bounds_;
}

void ClusterBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClusterBounds::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterBounds& ClusterBounds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_ClusterBounds.base);
  return *internal_default_instance();
}


void ClusterBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.ClusterBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(bounds_ != NULL);
    bounds_->Clear();
  }
  clusterid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClusterBounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.ClusterBounds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clusterId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_clusterid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clusterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .timhobbs.there_and_back_again.Bounds bounds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.ClusterBounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.ClusterBounds)
  return false;
#undef DO_
}

void ClusterBounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.ClusterBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 clusterId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clusterid(), output);
  }

  // required .timhobbs.there_and_back_again.Bounds bounds = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_bounds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.ClusterBounds)
}

::google::protobuf::uint8* ClusterBounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.ClusterBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 clusterId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clusterid(), target);
  }

  // required .timhobbs.there_and_back_again.Bounds bounds = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_bounds(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.ClusterBounds)
  return target;
}

size_t ClusterBounds::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:timhobbs.there_and_back_again.ClusterBounds)
  size_t total_size = 0;

  if (has_bounds()) {
    // required .timhobbs.there_and_back_again.Bounds bounds = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  if (has_clusterid()) {
    // required int32 clusterId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clusterid());
  }

  return total_size;
}
size_t ClusterBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.ClusterBounds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .timhobbs.there_and_back_again.Bounds bounds = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bounds_);

    // required int32 clusterId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clusterid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterBounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.ClusterBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterBounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterBounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.ClusterBounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.ClusterBounds)
    MergeFrom(*source);
  }
}

void ClusterBounds::MergeFrom(const ClusterBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.ClusterBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bounds()->::timhobbs::there_and_back_again::Bounds::MergeFrom(from.bounds());
    }
    if (cached_has_bits & 0x00000002u) {
      clusterid_ = from.clusterid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClusterBounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.ClusterBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterBounds::CopyFrom(const ClusterBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.ClusterBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterBounds::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_bounds()) {
    if (!this->bounds_->IsInitialized()) return false;
  }
  return true;
}

void ClusterBounds::Swap(ClusterBounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterBounds::InternalSwap(ClusterBounds* other) {
  using std::swap;
  swap(bounds_, other->bounds_);
  swap(clusterid_, other->clusterid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClusterBounds::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AreaQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AreaQuery::kClusterBoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AreaQuery::AreaQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_AreaQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.AreaQuery)
}
AreaQuery::AreaQuery(const AreaQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      clusterbounds_(from.clusterbounds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.AreaQuery)
}

void AreaQuery::SharedCtor() {
}

AreaQuery::~AreaQuery() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.AreaQuery)
  SharedDtor();
}

void AreaQuery::SharedDtor() {
}

void AreaQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AreaQuery::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AreaQuery& AreaQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_AreaQuery.base);
  return *internal_default_instance();
}


void AreaQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.AreaQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clusterbounds_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AreaQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.AreaQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .timhobbs.there_and_back_again.ClusterBounds clusterBounds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_clusterbounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.AreaQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.AreaQuery)
  return false;
#undef DO_
}

void AreaQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.AreaQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .timhobbs.there_and_back_again.ClusterBounds clusterBounds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clusterbounds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->clusterbounds(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.AreaQuery)
}

::google::protobuf::uint8* AreaQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.AreaQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .timhobbs.there_and_back_again.ClusterBounds clusterBounds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clusterbounds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->clusterbounds(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.AreaQuery)
  return target;
}

size_t AreaQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.AreaQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .timhobbs.there_and_back_again.ClusterBounds clusterBounds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->clusterbounds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->clusterbounds(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AreaQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.AreaQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const AreaQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AreaQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.AreaQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.AreaQuery)
    MergeFrom(*source);
  }
}

void AreaQuery::MergeFrom(const AreaQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.AreaQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clusterbounds_.MergeFrom(from.clusterbounds_);
}

void AreaQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.AreaQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreaQuery::CopyFrom(const AreaQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.AreaQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaQuery::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->clusterbounds())) return false;
  return true;
}

void AreaQuery::Swap(AreaQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AreaQuery::InternalSwap(AreaQuery* other) {
  using std::swap;
  CastToBase(&clusterbounds_)->InternalSwap(CastToBase(&other->clusterbounds_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AreaQuery::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CoreData::InitAsDefaultInstance() {
  ::timhobbs::there_and_back_again::_CoreData_default_instance_._instance.get_mutable()->areaquery_ = const_cast< ::timhobbs::there_and_back_again::AreaQuery*>(
      ::timhobbs::there_and_back_again::AreaQuery::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoreData::kStatisticalAreasFieldNumber;
const int CoreData::kAreaQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoreData::CoreData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_CoreData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:timhobbs.there_and_back_again.CoreData)
}
CoreData::CoreData(const CoreData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      statisticalareas_(from.statisticalareas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_areaquery()) {
    areaquery_ = new ::timhobbs::there_and_back_again::AreaQuery(*from.areaquery_);
  } else {
    areaquery_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:timhobbs.there_and_back_again.CoreData)
}

void CoreData::SharedCtor() {
  areaquery_ = NULL;
}

CoreData::~CoreData() {
  // @@protoc_insertion_point(destructor:timhobbs.there_and_back_again.CoreData)
  SharedDtor();
}

void CoreData::SharedDtor() {
  if (this != internal_default_instance()) delete areaquery_;
}

void CoreData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CoreData::descriptor() {
  ::protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoreData& CoreData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_there_5fand_5fback_5fagain_2eproto::scc_info_CoreData.base);
  return *internal_default_instance();
}


void CoreData::Clear() {
// @@protoc_insertion_point(message_clear_start:timhobbs.there_and_back_again.CoreData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statisticalareas_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(areaquery_ != NULL);
    areaquery_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CoreData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:timhobbs.there_and_back_again.CoreData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .timhobbs.there_and_back_again.StatisticalArea statisticalAreas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_statisticalareas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .timhobbs.there_and_back_again.AreaQuery areaQuery = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_areaquery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:timhobbs.there_and_back_again.CoreData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:timhobbs.there_and_back_again.CoreData)
  return false;
#undef DO_
}

void CoreData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:timhobbs.there_and_back_again.CoreData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .timhobbs.there_and_back_again.StatisticalArea statisticalAreas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statisticalareas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->statisticalareas(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // required .timhobbs.there_and_back_again.AreaQuery areaQuery = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_areaquery(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:timhobbs.there_and_back_again.CoreData)
}

::google::protobuf::uint8* CoreData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:timhobbs.there_and_back_again.CoreData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .timhobbs.there_and_back_again.StatisticalArea statisticalAreas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statisticalareas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->statisticalareas(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // required .timhobbs.there_and_back_again.AreaQuery areaQuery = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_areaquery(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:timhobbs.there_and_back_again.CoreData)
  return target;
}

size_t CoreData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:timhobbs.there_and_back_again.CoreData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .timhobbs.there_and_back_again.AreaQuery areaQuery = 2;
  if (has_areaquery()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *areaquery_);
  }
  // repeated .timhobbs.there_and_back_again.StatisticalArea statisticalAreas = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->statisticalareas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->statisticalareas(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoreData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:timhobbs.there_and_back_again.CoreData)
  GOOGLE_DCHECK_NE(&from, this);
  const CoreData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoreData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:timhobbs.there_and_back_again.CoreData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:timhobbs.there_and_back_again.CoreData)
    MergeFrom(*source);
  }
}

void CoreData::MergeFrom(const CoreData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:timhobbs.there_and_back_again.CoreData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statisticalareas_.MergeFrom(from.statisticalareas_);
  if (from.has_areaquery()) {
    mutable_areaquery()->::timhobbs::there_and_back_again::AreaQuery::MergeFrom(from.areaquery());
  }
}

void CoreData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:timhobbs.there_and_back_again.CoreData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoreData::CopyFrom(const CoreData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:timhobbs.there_and_back_again.CoreData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoreData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->statisticalareas())) return false;
  if (has_areaquery()) {
    if (!this->areaquery_->IsInitialized()) return false;
  }
  return true;
}

void CoreData::Swap(CoreData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoreData::InternalSwap(CoreData* other) {
  using std::swap;
  CastToBase(&statisticalareas_)->InternalSwap(CastToBase(&other->statisticalareas_));
  swap(areaquery_, other->areaquery_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CoreData::GetMetadata() const {
  protobuf_there_5fand_5fback_5fagain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_there_5fand_5fback_5fagain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace there_and_back_again
}  // namespace timhobbs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::Position* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::Position >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::Position >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::Polygon* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::Polygon >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::Polygon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::TransportStatistics* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::TransportStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::TransportStatistics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::TransitStatistics* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::TransitStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::TransitStatistics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::Bounds* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::Bounds >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::Bounds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::StatisticalArea* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::StatisticalArea >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::StatisticalArea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::StatisticalAreaPolygons* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::StatisticalAreaPolygons >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::StatisticalAreaPolygons >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::ClusterBounds* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::ClusterBounds >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::ClusterBounds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::AreaQuery* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::AreaQuery >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::AreaQuery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::timhobbs::there_and_back_again::CoreData* Arena::CreateMaybeMessage< ::timhobbs::there_and_back_again::CoreData >(Arena* arena) {
  return Arena::CreateInternal< ::timhobbs::there_and_back_again::CoreData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
