// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: there_and_back_again.proto

#ifndef PROTOBUF_INCLUDED_there_5fand_5fback_5fagain_2eproto
#define PROTOBUF_INCLUDED_there_5fand_5fback_5fagain_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_there_5fand_5fback_5fagain_2eproto 

namespace protobuf_there_5fand_5fback_5fagain_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_there_5fand_5fback_5fagain_2eproto
namespace timhobbs {
namespace there_and_back_again {
class AreaQuery;
class AreaQueryDefaultTypeInternal;
extern AreaQueryDefaultTypeInternal _AreaQuery_default_instance_;
class Bounds;
class BoundsDefaultTypeInternal;
extern BoundsDefaultTypeInternal _Bounds_default_instance_;
class ClusterBounds;
class ClusterBoundsDefaultTypeInternal;
extern ClusterBoundsDefaultTypeInternal _ClusterBounds_default_instance_;
class CoreData;
class CoreDataDefaultTypeInternal;
extern CoreDataDefaultTypeInternal _CoreData_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class StatisticalArea;
class StatisticalAreaDefaultTypeInternal;
extern StatisticalAreaDefaultTypeInternal _StatisticalArea_default_instance_;
class StatisticalAreaPolygons;
class StatisticalAreaPolygonsDefaultTypeInternal;
extern StatisticalAreaPolygonsDefaultTypeInternal _StatisticalAreaPolygons_default_instance_;
class StatisticalAreaPolygonsCollection;
class StatisticalAreaPolygonsCollectionDefaultTypeInternal;
extern StatisticalAreaPolygonsCollectionDefaultTypeInternal _StatisticalAreaPolygonsCollection_default_instance_;
class TransitStatistics;
class TransitStatisticsDefaultTypeInternal;
extern TransitStatisticsDefaultTypeInternal _TransitStatistics_default_instance_;
class TransportStatistics;
class TransportStatisticsDefaultTypeInternal;
extern TransportStatisticsDefaultTypeInternal _TransportStatistics_default_instance_;
}  // namespace there_and_back_again
}  // namespace timhobbs
namespace google {
namespace protobuf {
template<> ::timhobbs::there_and_back_again::AreaQuery* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::AreaQuery>(Arena*);
template<> ::timhobbs::there_and_back_again::Bounds* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::Bounds>(Arena*);
template<> ::timhobbs::there_and_back_again::ClusterBounds* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::ClusterBounds>(Arena*);
template<> ::timhobbs::there_and_back_again::CoreData* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::CoreData>(Arena*);
template<> ::timhobbs::there_and_back_again::Polygon* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::Polygon>(Arena*);
template<> ::timhobbs::there_and_back_again::Position* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::Position>(Arena*);
template<> ::timhobbs::there_and_back_again::StatisticalArea* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::StatisticalArea>(Arena*);
template<> ::timhobbs::there_and_back_again::StatisticalAreaPolygons* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::StatisticalAreaPolygons>(Arena*);
template<> ::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::StatisticalAreaPolygonsCollection>(Arena*);
template<> ::timhobbs::there_and_back_again::TransitStatistics* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::TransitStatistics>(Arena*);
template<> ::timhobbs::there_and_back_again::TransportStatistics* Arena::CreateMaybeMessage<::timhobbs::there_and_back_again::TransportStatistics>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace timhobbs {
namespace there_and_back_again {

enum TransportStatistics_Type {
  TransportStatistics_Type_TOTAL = 1,
  TransportStatistics_Type_WORK_FROM_HOME = 2,
  TransportStatistics_Type_DRIVE = 3,
  TransportStatistics_Type_PASSENGER = 4,
  TransportStatistics_Type_BICYCLE = 5,
  TransportStatistics_Type_WALK = 6,
  TransportStatistics_Type_BUS = 7,
  TransportStatistics_Type_TRAIN = 8,
  TransportStatistics_Type_FERRY = 9,
  TransportStatistics_Type_OTHER = 10
};
bool TransportStatistics_Type_IsValid(int value);
const TransportStatistics_Type TransportStatistics_Type_Type_MIN = TransportStatistics_Type_TOTAL;
const TransportStatistics_Type TransportStatistics_Type_Type_MAX = TransportStatistics_Type_OTHER;
const int TransportStatistics_Type_Type_ARRAYSIZE = TransportStatistics_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransportStatistics_Type_descriptor();
inline const ::std::string& TransportStatistics_Type_Name(TransportStatistics_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransportStatistics_Type_descriptor(), value);
}
inline bool TransportStatistics_Type_Parse(
    const ::std::string& name, TransportStatistics_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransportStatistics_Type>(
    TransportStatistics_Type_descriptor(), name, value);
}
// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(NULL);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float lat = 1;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  float lat() const;
  void set_lat(float value);

  // required float lng = 2;
  bool has_lng() const;
  void clear_lng();
  static const int kLngFieldNumber = 2;
  float lng() const;
  void set_lng(float value);

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.Position)
 private:
  void set_has_lat();
  void clear_has_lat();
  void set_has_lng();
  void clear_has_lng();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float lat_;
  float lng_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Polygon* other);
  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(NULL);
  }

  Polygon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .timhobbs.there_and_back_again.Position positions = 1;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 1;
  ::timhobbs::there_and_back_again::Position* mutable_positions(int index);
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::Position >*
      mutable_positions();
  const ::timhobbs::there_and_back_again::Position& positions(int index) const;
  ::timhobbs::there_and_back_again::Position* add_positions();
  const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::Position >&
      positions() const;

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::Position > positions_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransportStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.TransportStatistics) */ {
 public:
  TransportStatistics();
  virtual ~TransportStatistics();

  TransportStatistics(const TransportStatistics& from);

  inline TransportStatistics& operator=(const TransportStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransportStatistics(TransportStatistics&& from) noexcept
    : TransportStatistics() {
    *this = ::std::move(from);
  }

  inline TransportStatistics& operator=(TransportStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransportStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransportStatistics* internal_default_instance() {
    return reinterpret_cast<const TransportStatistics*>(
               &_TransportStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TransportStatistics* other);
  friend void swap(TransportStatistics& a, TransportStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransportStatistics* New() const final {
    return CreateMaybeMessage<TransportStatistics>(NULL);
  }

  TransportStatistics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransportStatistics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransportStatistics& from);
  void MergeFrom(const TransportStatistics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransportStatistics_Type Type;
  static const Type TOTAL =
    TransportStatistics_Type_TOTAL;
  static const Type WORK_FROM_HOME =
    TransportStatistics_Type_WORK_FROM_HOME;
  static const Type DRIVE =
    TransportStatistics_Type_DRIVE;
  static const Type PASSENGER =
    TransportStatistics_Type_PASSENGER;
  static const Type BICYCLE =
    TransportStatistics_Type_BICYCLE;
  static const Type WALK =
    TransportStatistics_Type_WALK;
  static const Type BUS =
    TransportStatistics_Type_BUS;
  static const Type TRAIN =
    TransportStatistics_Type_TRAIN;
  static const Type FERRY =
    TransportStatistics_Type_FERRY;
  static const Type OTHER =
    TransportStatistics_Type_OTHER;
  static inline bool Type_IsValid(int value) {
    return TransportStatistics_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TransportStatistics_Type_Type_MIN;
  static const Type Type_MAX =
    TransportStatistics_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TransportStatistics_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TransportStatistics_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TransportStatistics_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TransportStatistics_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // required .timhobbs.there_and_back_again.TransportStatistics.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::timhobbs::there_and_back_again::TransportStatistics_Type type() const;
  void set_type(::timhobbs::there_and_back_again::TransportStatistics_Type value);

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.TransportStatistics)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 count_;
  int type_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransitStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.TransitStatistics) */ {
 public:
  TransitStatistics();
  virtual ~TransitStatistics();

  TransitStatistics(const TransitStatistics& from);

  inline TransitStatistics& operator=(const TransitStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransitStatistics(TransitStatistics&& from) noexcept
    : TransitStatistics() {
    *this = ::std::move(from);
  }

  inline TransitStatistics& operator=(TransitStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransitStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransitStatistics* internal_default_instance() {
    return reinterpret_cast<const TransitStatistics*>(
               &_TransitStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TransitStatistics* other);
  friend void swap(TransitStatistics& a, TransitStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransitStatistics* New() const final {
    return CreateMaybeMessage<TransitStatistics>(NULL);
  }

  TransitStatistics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransitStatistics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransitStatistics& from);
  void MergeFrom(const TransitStatistics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransitStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .timhobbs.there_and_back_again.TransportStatistics transportStatistics = 3;
  int transportstatistics_size() const;
  void clear_transportstatistics();
  static const int kTransportStatisticsFieldNumber = 3;
  ::timhobbs::there_and_back_again::TransportStatistics* mutable_transportstatistics(int index);
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::TransportStatistics >*
      mutable_transportstatistics();
  const ::timhobbs::there_and_back_again::TransportStatistics& transportstatistics(int index) const;
  ::timhobbs::there_and_back_again::TransportStatistics* add_transportstatistics();
  const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::TransportStatistics >&
      transportstatistics() const;

  // required int32 statisticalAreaId = 1;
  bool has_statisticalareaid() const;
  void clear_statisticalareaid();
  static const int kStatisticalAreaIdFieldNumber = 1;
  ::google::protobuf::int32 statisticalareaid() const;
  void set_statisticalareaid(::google::protobuf::int32 value);

  // required bool isEducation = 2;
  bool has_iseducation() const;
  void clear_iseducation();
  static const int kIsEducationFieldNumber = 2;
  bool iseducation() const;
  void set_iseducation(bool value);

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.TransitStatistics)
 private:
  void set_has_statisticalareaid();
  void clear_has_statisticalareaid();
  void set_has_iseducation();
  void clear_has_iseducation();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::TransportStatistics > transportstatistics_;
  ::google::protobuf::int32 statisticalareaid_;
  bool iseducation_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bounds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.Bounds) */ {
 public:
  Bounds();
  virtual ~Bounds();

  Bounds(const Bounds& from);

  inline Bounds& operator=(const Bounds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bounds(Bounds&& from) noexcept
    : Bounds() {
    *this = ::std::move(from);
  }

  inline Bounds& operator=(Bounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bounds* internal_default_instance() {
    return reinterpret_cast<const Bounds*>(
               &_Bounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Bounds* other);
  friend void swap(Bounds& a, Bounds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bounds* New() const final {
    return CreateMaybeMessage<Bounds>(NULL);
  }

  Bounds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Bounds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Bounds& from);
  void MergeFrom(const Bounds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bounds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float minLat = 1;
  bool has_minlat() const;
  void clear_minlat();
  static const int kMinLatFieldNumber = 1;
  float minlat() const;
  void set_minlat(float value);

  // required float minLng = 2;
  bool has_minlng() const;
  void clear_minlng();
  static const int kMinLngFieldNumber = 2;
  float minlng() const;
  void set_minlng(float value);

  // required float maxLat = 3;
  bool has_maxlat() const;
  void clear_maxlat();
  static const int kMaxLatFieldNumber = 3;
  float maxlat() const;
  void set_maxlat(float value);

  // required float maxLng = 4;
  bool has_maxlng() const;
  void clear_maxlng();
  static const int kMaxLngFieldNumber = 4;
  float maxlng() const;
  void set_maxlng(float value);

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.Bounds)
 private:
  void set_has_minlat();
  void clear_has_minlat();
  void set_has_minlng();
  void clear_has_minlng();
  void set_has_maxlat();
  void clear_has_maxlat();
  void set_has_maxlng();
  void clear_has_maxlng();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float minlat_;
  float minlng_;
  float maxlat_;
  float maxlng_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatisticalArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.StatisticalArea) */ {
 public:
  StatisticalArea();
  virtual ~StatisticalArea();

  StatisticalArea(const StatisticalArea& from);

  inline StatisticalArea& operator=(const StatisticalArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatisticalArea(StatisticalArea&& from) noexcept
    : StatisticalArea() {
    *this = ::std::move(from);
  }

  inline StatisticalArea& operator=(StatisticalArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticalArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticalArea* internal_default_instance() {
    return reinterpret_cast<const StatisticalArea*>(
               &_StatisticalArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StatisticalArea* other);
  friend void swap(StatisticalArea& a, StatisticalArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatisticalArea* New() const final {
    return CreateMaybeMessage<StatisticalArea>(NULL);
  }

  StatisticalArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatisticalArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatisticalArea& from);
  void MergeFrom(const StatisticalArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticalArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .timhobbs.there_and_back_again.TransitStatistics inwardTravelStatistics = 4;
  int inwardtravelstatistics_size() const;
  void clear_inwardtravelstatistics();
  static const int kInwardTravelStatisticsFieldNumber = 4;
  ::timhobbs::there_and_back_again::TransitStatistics* mutable_inwardtravelstatistics(int index);
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::TransitStatistics >*
      mutable_inwardtravelstatistics();
  const ::timhobbs::there_and_back_again::TransitStatistics& inwardtravelstatistics(int index) const;
  ::timhobbs::there_and_back_again::TransitStatistics* add_inwardtravelstatistics();
  const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::TransitStatistics >&
      inwardtravelstatistics() const;

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .timhobbs.there_and_back_again.Position centroid = 5;
  bool has_centroid() const;
  void clear_centroid();
  static const int kCentroidFieldNumber = 5;
  private:
  const ::timhobbs::there_and_back_again::Position& _internal_centroid() const;
  public:
  const ::timhobbs::there_and_back_again::Position& centroid() const;
  ::timhobbs::there_and_back_again::Position* release_centroid();
  ::timhobbs::there_and_back_again::Position* mutable_centroid();
  void set_allocated_centroid(::timhobbs::there_and_back_again::Position* centroid);

  // required .timhobbs.there_and_back_again.Bounds bounds = 6;
  bool has_bounds() const;
  void clear_bounds();
  static const int kBoundsFieldNumber = 6;
  private:
  const ::timhobbs::there_and_back_again::Bounds& _internal_bounds() const;
  public:
  const ::timhobbs::there_and_back_again::Bounds& bounds() const;
  ::timhobbs::there_and_back_again::Bounds* release_bounds();
  ::timhobbs::there_and_back_again::Bounds* mutable_bounds();
  void set_allocated_bounds(::timhobbs::there_and_back_again::Bounds* bounds);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 clusterId = 3;
  bool has_clusterid() const;
  void clear_clusterid();
  static const int kClusterIdFieldNumber = 3;
  ::google::protobuf::int32 clusterid() const;
  void set_clusterid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.StatisticalArea)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_clusterid();
  void clear_has_clusterid();
  void set_has_centroid();
  void clear_has_centroid();
  void set_has_bounds();
  void clear_has_bounds();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::TransitStatistics > inwardtravelstatistics_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::timhobbs::there_and_back_again::Position* centroid_;
  ::timhobbs::there_and_back_again::Bounds* bounds_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 clusterid_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatisticalAreaPolygons : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.StatisticalAreaPolygons) */ {
 public:
  StatisticalAreaPolygons();
  virtual ~StatisticalAreaPolygons();

  StatisticalAreaPolygons(const StatisticalAreaPolygons& from);

  inline StatisticalAreaPolygons& operator=(const StatisticalAreaPolygons& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatisticalAreaPolygons(StatisticalAreaPolygons&& from) noexcept
    : StatisticalAreaPolygons() {
    *this = ::std::move(from);
  }

  inline StatisticalAreaPolygons& operator=(StatisticalAreaPolygons&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticalAreaPolygons& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticalAreaPolygons* internal_default_instance() {
    return reinterpret_cast<const StatisticalAreaPolygons*>(
               &_StatisticalAreaPolygons_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StatisticalAreaPolygons* other);
  friend void swap(StatisticalAreaPolygons& a, StatisticalAreaPolygons& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatisticalAreaPolygons* New() const final {
    return CreateMaybeMessage<StatisticalAreaPolygons>(NULL);
  }

  StatisticalAreaPolygons* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatisticalAreaPolygons>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatisticalAreaPolygons& from);
  void MergeFrom(const StatisticalAreaPolygons& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticalAreaPolygons* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .timhobbs.there_and_back_again.Polygon polygons = 2;
  int polygons_size() const;
  void clear_polygons();
  static const int kPolygonsFieldNumber = 2;
  ::timhobbs::there_and_back_again::Polygon* mutable_polygons(int index);
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::Polygon >*
      mutable_polygons();
  const ::timhobbs::there_and_back_again::Polygon& polygons(int index) const;
  ::timhobbs::there_and_back_again::Polygon* add_polygons();
  const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::Polygon >&
      polygons() const;

  // required int32 statisticalAreaId = 1;
  bool has_statisticalareaid() const;
  void clear_statisticalareaid();
  static const int kStatisticalAreaIdFieldNumber = 1;
  ::google::protobuf::int32 statisticalareaid() const;
  void set_statisticalareaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.StatisticalAreaPolygons)
 private:
  void set_has_statisticalareaid();
  void clear_has_statisticalareaid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::Polygon > polygons_;
  ::google::protobuf::int32 statisticalareaid_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatisticalAreaPolygonsCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection) */ {
 public:
  StatisticalAreaPolygonsCollection();
  virtual ~StatisticalAreaPolygonsCollection();

  StatisticalAreaPolygonsCollection(const StatisticalAreaPolygonsCollection& from);

  inline StatisticalAreaPolygonsCollection& operator=(const StatisticalAreaPolygonsCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatisticalAreaPolygonsCollection(StatisticalAreaPolygonsCollection&& from) noexcept
    : StatisticalAreaPolygonsCollection() {
    *this = ::std::move(from);
  }

  inline StatisticalAreaPolygonsCollection& operator=(StatisticalAreaPolygonsCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticalAreaPolygonsCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticalAreaPolygonsCollection* internal_default_instance() {
    return reinterpret_cast<const StatisticalAreaPolygonsCollection*>(
               &_StatisticalAreaPolygonsCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(StatisticalAreaPolygonsCollection* other);
  friend void swap(StatisticalAreaPolygonsCollection& a, StatisticalAreaPolygonsCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatisticalAreaPolygonsCollection* New() const final {
    return CreateMaybeMessage<StatisticalAreaPolygonsCollection>(NULL);
  }

  StatisticalAreaPolygonsCollection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatisticalAreaPolygonsCollection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatisticalAreaPolygonsCollection& from);
  void MergeFrom(const StatisticalAreaPolygonsCollection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticalAreaPolygonsCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .timhobbs.there_and_back_again.StatisticalAreaPolygons statisticalAreaPolygons = 1;
  int statisticalareapolygons_size() const;
  void clear_statisticalareapolygons();
  static const int kStatisticalAreaPolygonsFieldNumber = 1;
  ::timhobbs::there_and_back_again::StatisticalAreaPolygons* mutable_statisticalareapolygons(int index);
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::StatisticalAreaPolygons >*
      mutable_statisticalareapolygons();
  const ::timhobbs::there_and_back_again::StatisticalAreaPolygons& statisticalareapolygons(int index) const;
  ::timhobbs::there_and_back_again::StatisticalAreaPolygons* add_statisticalareapolygons();
  const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::StatisticalAreaPolygons >&
      statisticalareapolygons() const;

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::StatisticalAreaPolygons > statisticalareapolygons_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterBounds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.ClusterBounds) */ {
 public:
  ClusterBounds();
  virtual ~ClusterBounds();

  ClusterBounds(const ClusterBounds& from);

  inline ClusterBounds& operator=(const ClusterBounds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterBounds(ClusterBounds&& from) noexcept
    : ClusterBounds() {
    *this = ::std::move(from);
  }

  inline ClusterBounds& operator=(ClusterBounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterBounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterBounds* internal_default_instance() {
    return reinterpret_cast<const ClusterBounds*>(
               &_ClusterBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ClusterBounds* other);
  friend void swap(ClusterBounds& a, ClusterBounds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterBounds* New() const final {
    return CreateMaybeMessage<ClusterBounds>(NULL);
  }

  ClusterBounds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClusterBounds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClusterBounds& from);
  void MergeFrom(const ClusterBounds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterBounds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .timhobbs.there_and_back_again.Bounds bounds = 2;
  bool has_bounds() const;
  void clear_bounds();
  static const int kBoundsFieldNumber = 2;
  private:
  const ::timhobbs::there_and_back_again::Bounds& _internal_bounds() const;
  public:
  const ::timhobbs::there_and_back_again::Bounds& bounds() const;
  ::timhobbs::there_and_back_again::Bounds* release_bounds();
  ::timhobbs::there_and_back_again::Bounds* mutable_bounds();
  void set_allocated_bounds(::timhobbs::there_and_back_again::Bounds* bounds);

  // required int32 clusterId = 1;
  bool has_clusterid() const;
  void clear_clusterid();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::int32 clusterid() const;
  void set_clusterid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.ClusterBounds)
 private:
  void set_has_clusterid();
  void clear_has_clusterid();
  void set_has_bounds();
  void clear_has_bounds();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::timhobbs::there_and_back_again::Bounds* bounds_;
  ::google::protobuf::int32 clusterid_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AreaQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.AreaQuery) */ {
 public:
  AreaQuery();
  virtual ~AreaQuery();

  AreaQuery(const AreaQuery& from);

  inline AreaQuery& operator=(const AreaQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AreaQuery(AreaQuery&& from) noexcept
    : AreaQuery() {
    *this = ::std::move(from);
  }

  inline AreaQuery& operator=(AreaQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AreaQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AreaQuery* internal_default_instance() {
    return reinterpret_cast<const AreaQuery*>(
               &_AreaQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AreaQuery* other);
  friend void swap(AreaQuery& a, AreaQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AreaQuery* New() const final {
    return CreateMaybeMessage<AreaQuery>(NULL);
  }

  AreaQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AreaQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AreaQuery& from);
  void MergeFrom(const AreaQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AreaQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .timhobbs.there_and_back_again.ClusterBounds clusterBounds = 1;
  int clusterbounds_size() const;
  void clear_clusterbounds();
  static const int kClusterBoundsFieldNumber = 1;
  ::timhobbs::there_and_back_again::ClusterBounds* mutable_clusterbounds(int index);
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::ClusterBounds >*
      mutable_clusterbounds();
  const ::timhobbs::there_and_back_again::ClusterBounds& clusterbounds(int index) const;
  ::timhobbs::there_and_back_again::ClusterBounds* add_clusterbounds();
  const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::ClusterBounds >&
      clusterbounds() const;

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.AreaQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::ClusterBounds > clusterbounds_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CoreData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timhobbs.there_and_back_again.CoreData) */ {
 public:
  CoreData();
  virtual ~CoreData();

  CoreData(const CoreData& from);

  inline CoreData& operator=(const CoreData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoreData(CoreData&& from) noexcept
    : CoreData() {
    *this = ::std::move(from);
  }

  inline CoreData& operator=(CoreData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoreData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoreData* internal_default_instance() {
    return reinterpret_cast<const CoreData*>(
               &_CoreData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CoreData* other);
  friend void swap(CoreData& a, CoreData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoreData* New() const final {
    return CreateMaybeMessage<CoreData>(NULL);
  }

  CoreData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoreData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoreData& from);
  void MergeFrom(const CoreData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoreData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .timhobbs.there_and_back_again.StatisticalArea statisticalAreas = 1;
  int statisticalareas_size() const;
  void clear_statisticalareas();
  static const int kStatisticalAreasFieldNumber = 1;
  ::timhobbs::there_and_back_again::StatisticalArea* mutable_statisticalareas(int index);
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::StatisticalArea >*
      mutable_statisticalareas();
  const ::timhobbs::there_and_back_again::StatisticalArea& statisticalareas(int index) const;
  ::timhobbs::there_and_back_again::StatisticalArea* add_statisticalareas();
  const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::StatisticalArea >&
      statisticalareas() const;

  // required .timhobbs.there_and_back_again.AreaQuery areaQuery = 2;
  bool has_areaquery() const;
  void clear_areaquery();
  static const int kAreaQueryFieldNumber = 2;
  private:
  const ::timhobbs::there_and_back_again::AreaQuery& _internal_areaquery() const;
  public:
  const ::timhobbs::there_and_back_again::AreaQuery& areaquery() const;
  ::timhobbs::there_and_back_again::AreaQuery* release_areaquery();
  ::timhobbs::there_and_back_again::AreaQuery* mutable_areaquery();
  void set_allocated_areaquery(::timhobbs::there_and_back_again::AreaQuery* areaquery);

  // @@protoc_insertion_point(class_scope:timhobbs.there_and_back_again.CoreData)
 private:
  void set_has_areaquery();
  void clear_has_areaquery();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::StatisticalArea > statisticalareas_;
  ::timhobbs::there_and_back_again::AreaQuery* areaquery_;
  friend struct ::protobuf_there_5fand_5fback_5fagain_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// required float lat = 1;
inline bool Position::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Position::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Position::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline float Position::lat() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.Position.lat)
  return lat_;
}
inline void Position::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.Position.lat)
}

// required float lng = 2;
inline bool Position::has_lng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::set_has_lng() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Position::clear_has_lng() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Position::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline float Position::lng() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.Position.lng)
  return lng_;
}
inline void Position::set_lng(float value) {
  set_has_lng();
  lng_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.Position.lng)
}

// -------------------------------------------------------------------

// Polygon

// repeated .timhobbs.there_and_back_again.Position positions = 1;
inline int Polygon::positions_size() const {
  return positions_.size();
}
inline void Polygon::clear_positions() {
  positions_.Clear();
}
inline ::timhobbs::there_and_back_again::Position* Polygon::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.Polygon.positions)
  return positions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::Position >*
Polygon::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:timhobbs.there_and_back_again.Polygon.positions)
  return &positions_;
}
inline const ::timhobbs::there_and_back_again::Position& Polygon::positions(int index) const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.Polygon.positions)
  return positions_.Get(index);
}
inline ::timhobbs::there_and_back_again::Position* Polygon::add_positions() {
  // @@protoc_insertion_point(field_add:timhobbs.there_and_back_again.Polygon.positions)
  return positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::Position >&
Polygon::positions() const {
  // @@protoc_insertion_point(field_list:timhobbs.there_and_back_again.Polygon.positions)
  return positions_;
}

// -------------------------------------------------------------------

// TransportStatistics

// required .timhobbs.there_and_back_again.TransportStatistics.Type type = 1;
inline bool TransportStatistics::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransportStatistics::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransportStatistics::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransportStatistics::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::timhobbs::there_and_back_again::TransportStatistics_Type TransportStatistics::type() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.TransportStatistics.type)
  return static_cast< ::timhobbs::there_and_back_again::TransportStatistics_Type >(type_);
}
inline void TransportStatistics::set_type(::timhobbs::there_and_back_again::TransportStatistics_Type value) {
  assert(::timhobbs::there_and_back_again::TransportStatistics_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.TransportStatistics.type)
}

// required int32 count = 2;
inline bool TransportStatistics::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransportStatistics::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransportStatistics::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransportStatistics::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 TransportStatistics::count() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.TransportStatistics.count)
  return count_;
}
inline void TransportStatistics::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.TransportStatistics.count)
}

// -------------------------------------------------------------------

// TransitStatistics

// required int32 statisticalAreaId = 1;
inline bool TransitStatistics::has_statisticalareaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransitStatistics::set_has_statisticalareaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransitStatistics::clear_has_statisticalareaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransitStatistics::clear_statisticalareaid() {
  statisticalareaid_ = 0;
  clear_has_statisticalareaid();
}
inline ::google::protobuf::int32 TransitStatistics::statisticalareaid() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.TransitStatistics.statisticalAreaId)
  return statisticalareaid_;
}
inline void TransitStatistics::set_statisticalareaid(::google::protobuf::int32 value) {
  set_has_statisticalareaid();
  statisticalareaid_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.TransitStatistics.statisticalAreaId)
}

// required bool isEducation = 2;
inline bool TransitStatistics::has_iseducation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransitStatistics::set_has_iseducation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransitStatistics::clear_has_iseducation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransitStatistics::clear_iseducation() {
  iseducation_ = false;
  clear_has_iseducation();
}
inline bool TransitStatistics::iseducation() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.TransitStatistics.isEducation)
  return iseducation_;
}
inline void TransitStatistics::set_iseducation(bool value) {
  set_has_iseducation();
  iseducation_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.TransitStatistics.isEducation)
}

// repeated .timhobbs.there_and_back_again.TransportStatistics transportStatistics = 3;
inline int TransitStatistics::transportstatistics_size() const {
  return transportstatistics_.size();
}
inline void TransitStatistics::clear_transportstatistics() {
  transportstatistics_.Clear();
}
inline ::timhobbs::there_and_back_again::TransportStatistics* TransitStatistics::mutable_transportstatistics(int index) {
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.TransitStatistics.transportStatistics)
  return transportstatistics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::TransportStatistics >*
TransitStatistics::mutable_transportstatistics() {
  // @@protoc_insertion_point(field_mutable_list:timhobbs.there_and_back_again.TransitStatistics.transportStatistics)
  return &transportstatistics_;
}
inline const ::timhobbs::there_and_back_again::TransportStatistics& TransitStatistics::transportstatistics(int index) const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.TransitStatistics.transportStatistics)
  return transportstatistics_.Get(index);
}
inline ::timhobbs::there_and_back_again::TransportStatistics* TransitStatistics::add_transportstatistics() {
  // @@protoc_insertion_point(field_add:timhobbs.there_and_back_again.TransitStatistics.transportStatistics)
  return transportstatistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::TransportStatistics >&
TransitStatistics::transportstatistics() const {
  // @@protoc_insertion_point(field_list:timhobbs.there_and_back_again.TransitStatistics.transportStatistics)
  return transportstatistics_;
}

// -------------------------------------------------------------------

// Bounds

// required float minLat = 1;
inline bool Bounds::has_minlat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bounds::set_has_minlat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bounds::clear_has_minlat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bounds::clear_minlat() {
  minlat_ = 0;
  clear_has_minlat();
}
inline float Bounds::minlat() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.Bounds.minLat)
  return minlat_;
}
inline void Bounds::set_minlat(float value) {
  set_has_minlat();
  minlat_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.Bounds.minLat)
}

// required float minLng = 2;
inline bool Bounds::has_minlng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bounds::set_has_minlng() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bounds::clear_has_minlng() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bounds::clear_minlng() {
  minlng_ = 0;
  clear_has_minlng();
}
inline float Bounds::minlng() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.Bounds.minLng)
  return minlng_;
}
inline void Bounds::set_minlng(float value) {
  set_has_minlng();
  minlng_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.Bounds.minLng)
}

// required float maxLat = 3;
inline bool Bounds::has_maxlat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bounds::set_has_maxlat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bounds::clear_has_maxlat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bounds::clear_maxlat() {
  maxlat_ = 0;
  clear_has_maxlat();
}
inline float Bounds::maxlat() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.Bounds.maxLat)
  return maxlat_;
}
inline void Bounds::set_maxlat(float value) {
  set_has_maxlat();
  maxlat_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.Bounds.maxLat)
}

// required float maxLng = 4;
inline bool Bounds::has_maxlng() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bounds::set_has_maxlng() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bounds::clear_has_maxlng() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bounds::clear_maxlng() {
  maxlng_ = 0;
  clear_has_maxlng();
}
inline float Bounds::maxlng() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.Bounds.maxLng)
  return maxlng_;
}
inline void Bounds::set_maxlng(float value) {
  set_has_maxlng();
  maxlng_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.Bounds.maxLng)
}

// -------------------------------------------------------------------

// StatisticalArea

// required int32 id = 1;
inline bool StatisticalArea::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatisticalArea::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatisticalArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatisticalArea::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 StatisticalArea::id() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.StatisticalArea.id)
  return id_;
}
inline void StatisticalArea::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.StatisticalArea.id)
}

// required string name = 2;
inline bool StatisticalArea::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatisticalArea::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatisticalArea::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatisticalArea::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StatisticalArea::name() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.StatisticalArea.name)
  return name_.GetNoArena();
}
inline void StatisticalArea::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.StatisticalArea.name)
}
#if LANG_CXX11
inline void StatisticalArea::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timhobbs.there_and_back_again.StatisticalArea.name)
}
#endif
inline void StatisticalArea::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timhobbs.there_and_back_again.StatisticalArea.name)
}
inline void StatisticalArea::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timhobbs.there_and_back_again.StatisticalArea.name)
}
inline ::std::string* StatisticalArea::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.StatisticalArea.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatisticalArea::release_name() {
  // @@protoc_insertion_point(field_release:timhobbs.there_and_back_again.StatisticalArea.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatisticalArea::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:timhobbs.there_and_back_again.StatisticalArea.name)
}

// required int32 clusterId = 3;
inline bool StatisticalArea::has_clusterid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatisticalArea::set_has_clusterid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatisticalArea::clear_has_clusterid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatisticalArea::clear_clusterid() {
  clusterid_ = 0;
  clear_has_clusterid();
}
inline ::google::protobuf::int32 StatisticalArea::clusterid() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.StatisticalArea.clusterId)
  return clusterid_;
}
inline void StatisticalArea::set_clusterid(::google::protobuf::int32 value) {
  set_has_clusterid();
  clusterid_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.StatisticalArea.clusterId)
}

// repeated .timhobbs.there_and_back_again.TransitStatistics inwardTravelStatistics = 4;
inline int StatisticalArea::inwardtravelstatistics_size() const {
  return inwardtravelstatistics_.size();
}
inline void StatisticalArea::clear_inwardtravelstatistics() {
  inwardtravelstatistics_.Clear();
}
inline ::timhobbs::there_and_back_again::TransitStatistics* StatisticalArea::mutable_inwardtravelstatistics(int index) {
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.StatisticalArea.inwardTravelStatistics)
  return inwardtravelstatistics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::TransitStatistics >*
StatisticalArea::mutable_inwardtravelstatistics() {
  // @@protoc_insertion_point(field_mutable_list:timhobbs.there_and_back_again.StatisticalArea.inwardTravelStatistics)
  return &inwardtravelstatistics_;
}
inline const ::timhobbs::there_and_back_again::TransitStatistics& StatisticalArea::inwardtravelstatistics(int index) const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.StatisticalArea.inwardTravelStatistics)
  return inwardtravelstatistics_.Get(index);
}
inline ::timhobbs::there_and_back_again::TransitStatistics* StatisticalArea::add_inwardtravelstatistics() {
  // @@protoc_insertion_point(field_add:timhobbs.there_and_back_again.StatisticalArea.inwardTravelStatistics)
  return inwardtravelstatistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::TransitStatistics >&
StatisticalArea::inwardtravelstatistics() const {
  // @@protoc_insertion_point(field_list:timhobbs.there_and_back_again.StatisticalArea.inwardTravelStatistics)
  return inwardtravelstatistics_;
}

// required .timhobbs.there_and_back_again.Position centroid = 5;
inline bool StatisticalArea::has_centroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatisticalArea::set_has_centroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatisticalArea::clear_has_centroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatisticalArea::clear_centroid() {
  if (centroid_ != NULL) centroid_->Clear();
  clear_has_centroid();
}
inline const ::timhobbs::there_and_back_again::Position& StatisticalArea::_internal_centroid() const {
  return *centroid_;
}
inline const ::timhobbs::there_and_back_again::Position& StatisticalArea::centroid() const {
  const ::timhobbs::there_and_back_again::Position* p = centroid_;
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.StatisticalArea.centroid)
  return p != NULL ? *p : *reinterpret_cast<const ::timhobbs::there_and_back_again::Position*>(
      &::timhobbs::there_and_back_again::_Position_default_instance_);
}
inline ::timhobbs::there_and_back_again::Position* StatisticalArea::release_centroid() {
  // @@protoc_insertion_point(field_release:timhobbs.there_and_back_again.StatisticalArea.centroid)
  clear_has_centroid();
  ::timhobbs::there_and_back_again::Position* temp = centroid_;
  centroid_ = NULL;
  return temp;
}
inline ::timhobbs::there_and_back_again::Position* StatisticalArea::mutable_centroid() {
  set_has_centroid();
  if (centroid_ == NULL) {
    auto* p = CreateMaybeMessage<::timhobbs::there_and_back_again::Position>(GetArenaNoVirtual());
    centroid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.StatisticalArea.centroid)
  return centroid_;
}
inline void StatisticalArea::set_allocated_centroid(::timhobbs::there_and_back_again::Position* centroid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete centroid_;
  }
  if (centroid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      centroid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, centroid, submessage_arena);
    }
    set_has_centroid();
  } else {
    clear_has_centroid();
  }
  centroid_ = centroid;
  // @@protoc_insertion_point(field_set_allocated:timhobbs.there_and_back_again.StatisticalArea.centroid)
}

// required .timhobbs.there_and_back_again.Bounds bounds = 6;
inline bool StatisticalArea::has_bounds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatisticalArea::set_has_bounds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatisticalArea::clear_has_bounds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatisticalArea::clear_bounds() {
  if (bounds_ != NULL) bounds_->Clear();
  clear_has_bounds();
}
inline const ::timhobbs::there_and_back_again::Bounds& StatisticalArea::_internal_bounds() const {
  return *bounds_;
}
inline const ::timhobbs::there_and_back_again::Bounds& StatisticalArea::bounds() const {
  const ::timhobbs::there_and_back_again::Bounds* p = bounds_;
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.StatisticalArea.bounds)
  return p != NULL ? *p : *reinterpret_cast<const ::timhobbs::there_and_back_again::Bounds*>(
      &::timhobbs::there_and_back_again::_Bounds_default_instance_);
}
inline ::timhobbs::there_and_back_again::Bounds* StatisticalArea::release_bounds() {
  // @@protoc_insertion_point(field_release:timhobbs.there_and_back_again.StatisticalArea.bounds)
  clear_has_bounds();
  ::timhobbs::there_and_back_again::Bounds* temp = bounds_;
  bounds_ = NULL;
  return temp;
}
inline ::timhobbs::there_and_back_again::Bounds* StatisticalArea::mutable_bounds() {
  set_has_bounds();
  if (bounds_ == NULL) {
    auto* p = CreateMaybeMessage<::timhobbs::there_and_back_again::Bounds>(GetArenaNoVirtual());
    bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.StatisticalArea.bounds)
  return bounds_;
}
inline void StatisticalArea::set_allocated_bounds(::timhobbs::there_and_back_again::Bounds* bounds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bounds_;
  }
  if (bounds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bounds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    set_has_bounds();
  } else {
    clear_has_bounds();
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:timhobbs.there_and_back_again.StatisticalArea.bounds)
}

// -------------------------------------------------------------------

// StatisticalAreaPolygons

// required int32 statisticalAreaId = 1;
inline bool StatisticalAreaPolygons::has_statisticalareaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatisticalAreaPolygons::set_has_statisticalareaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatisticalAreaPolygons::clear_has_statisticalareaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatisticalAreaPolygons::clear_statisticalareaid() {
  statisticalareaid_ = 0;
  clear_has_statisticalareaid();
}
inline ::google::protobuf::int32 StatisticalAreaPolygons::statisticalareaid() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.StatisticalAreaPolygons.statisticalAreaId)
  return statisticalareaid_;
}
inline void StatisticalAreaPolygons::set_statisticalareaid(::google::protobuf::int32 value) {
  set_has_statisticalareaid();
  statisticalareaid_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.StatisticalAreaPolygons.statisticalAreaId)
}

// repeated .timhobbs.there_and_back_again.Polygon polygons = 2;
inline int StatisticalAreaPolygons::polygons_size() const {
  return polygons_.size();
}
inline void StatisticalAreaPolygons::clear_polygons() {
  polygons_.Clear();
}
inline ::timhobbs::there_and_back_again::Polygon* StatisticalAreaPolygons::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.StatisticalAreaPolygons.polygons)
  return polygons_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::Polygon >*
StatisticalAreaPolygons::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:timhobbs.there_and_back_again.StatisticalAreaPolygons.polygons)
  return &polygons_;
}
inline const ::timhobbs::there_and_back_again::Polygon& StatisticalAreaPolygons::polygons(int index) const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.StatisticalAreaPolygons.polygons)
  return polygons_.Get(index);
}
inline ::timhobbs::there_and_back_again::Polygon* StatisticalAreaPolygons::add_polygons() {
  // @@protoc_insertion_point(field_add:timhobbs.there_and_back_again.StatisticalAreaPolygons.polygons)
  return polygons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::Polygon >&
StatisticalAreaPolygons::polygons() const {
  // @@protoc_insertion_point(field_list:timhobbs.there_and_back_again.StatisticalAreaPolygons.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// StatisticalAreaPolygonsCollection

// repeated .timhobbs.there_and_back_again.StatisticalAreaPolygons statisticalAreaPolygons = 1;
inline int StatisticalAreaPolygonsCollection::statisticalareapolygons_size() const {
  return statisticalareapolygons_.size();
}
inline void StatisticalAreaPolygonsCollection::clear_statisticalareapolygons() {
  statisticalareapolygons_.Clear();
}
inline ::timhobbs::there_and_back_again::StatisticalAreaPolygons* StatisticalAreaPolygonsCollection::mutable_statisticalareapolygons(int index) {
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection.statisticalAreaPolygons)
  return statisticalareapolygons_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::StatisticalAreaPolygons >*
StatisticalAreaPolygonsCollection::mutable_statisticalareapolygons() {
  // @@protoc_insertion_point(field_mutable_list:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection.statisticalAreaPolygons)
  return &statisticalareapolygons_;
}
inline const ::timhobbs::there_and_back_again::StatisticalAreaPolygons& StatisticalAreaPolygonsCollection::statisticalareapolygons(int index) const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection.statisticalAreaPolygons)
  return statisticalareapolygons_.Get(index);
}
inline ::timhobbs::there_and_back_again::StatisticalAreaPolygons* StatisticalAreaPolygonsCollection::add_statisticalareapolygons() {
  // @@protoc_insertion_point(field_add:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection.statisticalAreaPolygons)
  return statisticalareapolygons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::StatisticalAreaPolygons >&
StatisticalAreaPolygonsCollection::statisticalareapolygons() const {
  // @@protoc_insertion_point(field_list:timhobbs.there_and_back_again.StatisticalAreaPolygonsCollection.statisticalAreaPolygons)
  return statisticalareapolygons_;
}

// -------------------------------------------------------------------

// ClusterBounds

// required int32 clusterId = 1;
inline bool ClusterBounds::has_clusterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClusterBounds::set_has_clusterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClusterBounds::clear_has_clusterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClusterBounds::clear_clusterid() {
  clusterid_ = 0;
  clear_has_clusterid();
}
inline ::google::protobuf::int32 ClusterBounds::clusterid() const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.ClusterBounds.clusterId)
  return clusterid_;
}
inline void ClusterBounds::set_clusterid(::google::protobuf::int32 value) {
  set_has_clusterid();
  clusterid_ = value;
  // @@protoc_insertion_point(field_set:timhobbs.there_and_back_again.ClusterBounds.clusterId)
}

// required .timhobbs.there_and_back_again.Bounds bounds = 2;
inline bool ClusterBounds::has_bounds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterBounds::set_has_bounds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterBounds::clear_has_bounds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterBounds::clear_bounds() {
  if (bounds_ != NULL) bounds_->Clear();
  clear_has_bounds();
}
inline const ::timhobbs::there_and_back_again::Bounds& ClusterBounds::_internal_bounds() const {
  return *bounds_;
}
inline const ::timhobbs::there_and_back_again::Bounds& ClusterBounds::bounds() const {
  const ::timhobbs::there_and_back_again::Bounds* p = bounds_;
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.ClusterBounds.bounds)
  return p != NULL ? *p : *reinterpret_cast<const ::timhobbs::there_and_back_again::Bounds*>(
      &::timhobbs::there_and_back_again::_Bounds_default_instance_);
}
inline ::timhobbs::there_and_back_again::Bounds* ClusterBounds::release_bounds() {
  // @@protoc_insertion_point(field_release:timhobbs.there_and_back_again.ClusterBounds.bounds)
  clear_has_bounds();
  ::timhobbs::there_and_back_again::Bounds* temp = bounds_;
  bounds_ = NULL;
  return temp;
}
inline ::timhobbs::there_and_back_again::Bounds* ClusterBounds::mutable_bounds() {
  set_has_bounds();
  if (bounds_ == NULL) {
    auto* p = CreateMaybeMessage<::timhobbs::there_and_back_again::Bounds>(GetArenaNoVirtual());
    bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.ClusterBounds.bounds)
  return bounds_;
}
inline void ClusterBounds::set_allocated_bounds(::timhobbs::there_and_back_again::Bounds* bounds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bounds_;
  }
  if (bounds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bounds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    set_has_bounds();
  } else {
    clear_has_bounds();
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:timhobbs.there_and_back_again.ClusterBounds.bounds)
}

// -------------------------------------------------------------------

// AreaQuery

// repeated .timhobbs.there_and_back_again.ClusterBounds clusterBounds = 1;
inline int AreaQuery::clusterbounds_size() const {
  return clusterbounds_.size();
}
inline void AreaQuery::clear_clusterbounds() {
  clusterbounds_.Clear();
}
inline ::timhobbs::there_and_back_again::ClusterBounds* AreaQuery::mutable_clusterbounds(int index) {
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.AreaQuery.clusterBounds)
  return clusterbounds_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::ClusterBounds >*
AreaQuery::mutable_clusterbounds() {
  // @@protoc_insertion_point(field_mutable_list:timhobbs.there_and_back_again.AreaQuery.clusterBounds)
  return &clusterbounds_;
}
inline const ::timhobbs::there_and_back_again::ClusterBounds& AreaQuery::clusterbounds(int index) const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.AreaQuery.clusterBounds)
  return clusterbounds_.Get(index);
}
inline ::timhobbs::there_and_back_again::ClusterBounds* AreaQuery::add_clusterbounds() {
  // @@protoc_insertion_point(field_add:timhobbs.there_and_back_again.AreaQuery.clusterBounds)
  return clusterbounds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::ClusterBounds >&
AreaQuery::clusterbounds() const {
  // @@protoc_insertion_point(field_list:timhobbs.there_and_back_again.AreaQuery.clusterBounds)
  return clusterbounds_;
}

// -------------------------------------------------------------------

// CoreData

// repeated .timhobbs.there_and_back_again.StatisticalArea statisticalAreas = 1;
inline int CoreData::statisticalareas_size() const {
  return statisticalareas_.size();
}
inline void CoreData::clear_statisticalareas() {
  statisticalareas_.Clear();
}
inline ::timhobbs::there_and_back_again::StatisticalArea* CoreData::mutable_statisticalareas(int index) {
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.CoreData.statisticalAreas)
  return statisticalareas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::StatisticalArea >*
CoreData::mutable_statisticalareas() {
  // @@protoc_insertion_point(field_mutable_list:timhobbs.there_and_back_again.CoreData.statisticalAreas)
  return &statisticalareas_;
}
inline const ::timhobbs::there_and_back_again::StatisticalArea& CoreData::statisticalareas(int index) const {
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.CoreData.statisticalAreas)
  return statisticalareas_.Get(index);
}
inline ::timhobbs::there_and_back_again::StatisticalArea* CoreData::add_statisticalareas() {
  // @@protoc_insertion_point(field_add:timhobbs.there_and_back_again.CoreData.statisticalAreas)
  return statisticalareas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::timhobbs::there_and_back_again::StatisticalArea >&
CoreData::statisticalareas() const {
  // @@protoc_insertion_point(field_list:timhobbs.there_and_back_again.CoreData.statisticalAreas)
  return statisticalareas_;
}

// required .timhobbs.there_and_back_again.AreaQuery areaQuery = 2;
inline bool CoreData::has_areaquery() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoreData::set_has_areaquery() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoreData::clear_has_areaquery() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoreData::clear_areaquery() {
  if (areaquery_ != NULL) areaquery_->Clear();
  clear_has_areaquery();
}
inline const ::timhobbs::there_and_back_again::AreaQuery& CoreData::_internal_areaquery() const {
  return *areaquery_;
}
inline const ::timhobbs::there_and_back_again::AreaQuery& CoreData::areaquery() const {
  const ::timhobbs::there_and_back_again::AreaQuery* p = areaquery_;
  // @@protoc_insertion_point(field_get:timhobbs.there_and_back_again.CoreData.areaQuery)
  return p != NULL ? *p : *reinterpret_cast<const ::timhobbs::there_and_back_again::AreaQuery*>(
      &::timhobbs::there_and_back_again::_AreaQuery_default_instance_);
}
inline ::timhobbs::there_and_back_again::AreaQuery* CoreData::release_areaquery() {
  // @@protoc_insertion_point(field_release:timhobbs.there_and_back_again.CoreData.areaQuery)
  clear_has_areaquery();
  ::timhobbs::there_and_back_again::AreaQuery* temp = areaquery_;
  areaquery_ = NULL;
  return temp;
}
inline ::timhobbs::there_and_back_again::AreaQuery* CoreData::mutable_areaquery() {
  set_has_areaquery();
  if (areaquery_ == NULL) {
    auto* p = CreateMaybeMessage<::timhobbs::there_and_back_again::AreaQuery>(GetArenaNoVirtual());
    areaquery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:timhobbs.there_and_back_again.CoreData.areaQuery)
  return areaquery_;
}
inline void CoreData::set_allocated_areaquery(::timhobbs::there_and_back_again::AreaQuery* areaquery) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete areaquery_;
  }
  if (areaquery) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      areaquery = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, areaquery, submessage_arena);
    }
    set_has_areaquery();
  } else {
    clear_has_areaquery();
  }
  areaquery_ = areaquery;
  // @@protoc_insertion_point(field_set_allocated:timhobbs.there_and_back_again.CoreData.areaQuery)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace there_and_back_again
}  // namespace timhobbs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::timhobbs::there_and_back_again::TransportStatistics_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::timhobbs::there_and_back_again::TransportStatistics_Type>() {
  return ::timhobbs::there_and_back_again::TransportStatistics_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_there_5fand_5fback_5fagain_2eproto
